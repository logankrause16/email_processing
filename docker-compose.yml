version: '3.8'

# This is the docker compose to run this proejct. It is composed of 3 services:
# 1. api: The main API service that handles incoming requests.
# 2. mongo: The MongoDB service for data storage.
# 3. load-test: A service for running load tests against the API.

# The api service is built from the Dockerfile in the current directory and exposes port 8080.
# It depends on the mongo service, which is built from the official MongoDB image and exposes port 27017.
# The load-test service is built from the same Dockerfile and runs load tests against the API.

# Just run `docker-compose up` to start all services, or `docker-compose up api` to start only the API service. etc

# if you want to see it spit out some logs while running: `docker-compose up -d` is what you're looking for

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - MONGODB_URI=mongodb://mongo:27017
      - MONGODB_DATABASE=catchall
      - DELIVERED_THRESHOLD=1000
    command: ["-processor", "-workers=8"]
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - catchall-network

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - catchall-network

  # For larger scale testing and development
  load-test:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["go", "test", "-bench=.", "./pkg/eventpool"]
    networks:
      - catchall-network
    profiles:
      - testing

networks:
  catchall-network:
    driver: bridge

volumes:
  mongo-data: